plugins {
    id "fabric-loom" version "1.9-SNAPSHOT"
    id "maven-publish"
}

version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    maven {
        name = "modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        url = "https://maven.terraformersmc.com/releases/"
    }
    maven {
        url = "https://gitlab.com/api/v4/projects/21830712/packages/maven"
    }
    maven {
        name = "Xander Maven"
        url = "https://maven.isxander.dev/releases"
    }
    maven {
        url = "https://maven.architectury.dev/"
    }
    maven {
        name = "SmartBrainLib (SBL) Maven Repo"
        url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
    }
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    // Mappings
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Architectury
    modRuntimeOnly("dev.architectury:architectury-fabric:${project.architectury_version}")

    // Debug Utils
    modImplementation("io.github.flemmli97:debugutils:${project.debugutils_version}") {
        transitive = false
    }

    // Dev Tools
//    modRuntimeOnly("maven.modrinth:dev-tools-unlocker:${project.devtools_version}") {
//        transitive = false
//    }

    // Fabric Language Kotlin
    modRuntimeOnly("net.fabricmc:fabric-language-kotlin:${project.fabric_language_kotlin_version}")

    // Item Suggestions Not Require Mod Name
    modRuntimeOnly("maven.modrinth:isnrmn:${project.isnrmn_version}")

    // Mod Menu
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
        transitive = false
    }

    // Observable
    modRuntimeOnly("maven.modrinth:observable:${project.observable_version}")

    // Smart Brain Lib
    modImplementation("net.tslat.smartbrainlib:SmartBrainLib-fabric-${project.minecraft_version}:${project.sbl_version}")

    // Yet Another Config Lib
    modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}")
}

fabricApi {
    configureDataGeneration()
}

loom {
    accessWidenerPath = file("src/main/resources/${project.archives_base_name}.accesswidener")
}

processResources {
    Map<String, Object> properties = [
        "version": project.version,
        "loader_version": project.loader_version,
        "fabric_version": project.fabric_version,
        "sbl_version": project.sbl_version,
        "yacl_version": project.yacl_version
    ]

    properties.each { key, value ->
        inputs.property(key, value)
    }

    filesMatching(["fabric.mod.json", "META-INF/neoforge.mods.toml"]) {
        expand(properties)
    }
}

tasks.register("cleanGenerated", Delete) {
    delete file("src/main/generated")
}

tasks.withType(JavaCompile).configureEach {
    it.dependsOn tasks.named("cleanGenerated")
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
    from("LICENSE.md") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// Configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.base.archivesName.get()
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
